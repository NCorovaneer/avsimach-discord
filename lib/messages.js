const {getGif} = require('./imgur');
const {comparePlanes} = require('./jetchart-index');
const {getSchedule} = require('./schedule');
const {getFact} = require('./facts');
const {getBlueflagStatusMessage} = require('./blueflag');
const memeGenerator = require('./memeGenerator');
const {isPolite, isRude, rollByChance, cleanFromPoliteAndRude} = require('./utils');
const {updateMig, showMigStatus, updateProfile} = require('./mig21');

const COMPARE_REGEX = /([M|F|S|A]\S*)\s–∏\s([M|F|S|A]\S*)/gi;
const SHOW_REGEX = /–ø–æ–∫–∞–∂–∏\s(.*)$/gi;
const MEMES_LIMIT = 3;
const MIG_LIMIT = 4;
const HOME_ID = '444034088429551619';
const BOSS_ID = '466307524040327179';

let memesCount = 0;
let migMemesCount = 0;
let memesInterval = setInterval(() => {
	memesCount = 0;
	migMemesCount = 0;
}, 60000 * 65);

const MESSAGES = {
	chack: {
		pattern: /\/—á–∞–∫/gi,
		reply: message => {
			message.reply({file: 'https://cdn.discordapp.com/attachments/444034088429551619/466315013607522304/5b168d61ee2cc163d01846b8.png'})
		}
	},
	hmd: {
		pattern: /\/nashlem|\/–Ω–∞—à–ª–µ–º/gi,
		reply: message => {
			message.reply({file: 'https://i.imgur.com/7FHoSIG.png'})
		}
	},
	findGif: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, –ø–æ–∫–∞–∂–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫ –ø–æ–∫–∞–∂–∏/gi,
		reply: message => {
			cleanFromPoliteAndRude(message.content).match(SHOW_REGEX);
			const query = RegExp.$1;
			const gifCallback = getGif.bind(null, message, query);

			proceedMemes(message, {}, gifCallback);
		}
	},
	facts: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –≤—å–µ—Ç–Ω–∞–º/gi,
		reply: message => {
			const factCallback = getFact.bind(null, message);

			proceedMemes(message, {}, factCallback);
		}
	},
	memesLeft: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ —Ç–∞–ª–æ–Ω–æ–≤|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ —Ç–∞–ª–æ–Ω–∞–º|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ –º–µ–º–∞–º/gi,
		reply: message => {
			const memesLeft = MEMES_LIMIT - memesCount;
			let ticketString;
			let ticketsLeftString = '–æ—Å—Ç–∞–ª–æ—Å—å';

			if (memesLeft === 0) {
				ticketString = '—Ç–∞–ª–æ–Ω–æ–≤';
			} else if (memesLeft === 1) {
				ticketsLeftString = '–æ—Å—Ç–∞–ª—Å—è';
				ticketString = '—Ç–∞–ª–æ–Ω';
			} else {
				ticketString = '—Ç–∞–ª–æ–Ω–∞';
			}

			message.reply(`${ticketsLeftString} ${memesLeft} ${ticketString} –Ω–∞ –º–µ–º—ã, –Ω–∞ –ú–∏–ì ${MIG_LIMIT - migMemesCount}`);
		}
	},
	infa: {
		pattern: /60\/40/gi,
		reply: message => {
			_checkInfa(message)
		}
	},
	egg: {
		pattern: /egg|–ø–æ–∂–µ–ª|–ø–æ–∂–∏–ª|–µ–≥–≥–ø|–±–∞–∫–ª–∞–∂–∞–Ω|—ç–≥–≥|–µ–≥–ø/gi,
		reply: message => {
			message.react('üçÜ');
		}
	},
	hi: {
		pattern: /—Ö–∞–π –∫—Å—Ç–∞|—Ö–∞–π, –∫—Å—Ç–∞|hi ksta|hi, ksta/gi,
		reply: message => {
			message.react('üëã');
		}
	},
	bossReplay: {
		pattern: new RegExp(BOSS_ID),
		reply: message => {
			const isAppretiation = /—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é/i.test(message.content);

			if (isAppretiation) {
				if (rollByChance(0.7)) {
					message.react('üëå');
				} else {
					message.react('‚ù§');
				}
			}
		}
	},
	compare: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å—Ä–∞–≤–Ω–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫ —Å—Ä–∞–≤–Ω–∏/gi,
		reply: message => {
			message.content.match(COMPARE_REGEX);

			const firstPlane = RegExp.$1;
			const secondPlane = RegExp.$2;

			if (_checkForMemesAndReply(message)) return;

			comparePlanes(firstPlane, secondPlane)
				.then(compareMessage => {
					message.reply(compareMessage);
				})
				.catch(error => {
					console.log(error);

					message.reply('—á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å');
				});
		}
	},
	delete: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —É–¥–∞–ª–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫ —É–¥–∞–ª–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —É–¥–æ–ª–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫ —É–¥–æ–ª–∏/gi,
		reply: message => {
			const userId = message.author.id;
			const match = new RegExp(userId, 'gi');

			message.channel.fetchMessages({limit: 15})
				.then(messages => {
					const messageToDeleted = messages.filter(ms => {
						return (ms.author.id === BOSS_ID && match.test(ms.content));
					}).array();

					if (messageToDeleted.length) {
						messageToDeleted[0].delete();
					}
				})
				.catch(() => {
					message.reply('—Å–æ—Ä—Ä–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫');
				});
		}
	},
	blueflag: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ –±–ª—é—Ñ–ª–∞–≥—É|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ –±–ª—é–ø—É–∫—É/gi,
		reply: message => {
			const guild = message.guild;
			const redStar = guild.emojis.find('name', 'red_star');
			const blueStar = guild.emojis.find('name', 'blue');
			message.reply('–∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤—É—Ä–∞...');

			getBlueflagStatusMessage(redStar, blueStar, guild.emojis)
				.then(statusMessage => {
					message.reply(statusMessage);
				})
				.catch(() => {
					message.reply('—Å–æ—Ä—Ä–µ, –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å');
				});
		}
	},
	memeGenerator: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å–¥–µ–ª–∞–π –º–µ–º/gi,
		reply: (message, Discord) => {
			const [match, url, textBottom, textTop] = message.content.split('\n');

			if (!url || !textBottom) {
				message.replay('–ø–µ—Ä–µ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ –º–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
			}

			memeGenerator(url, textBottom, textTop)
				.then(buffer => {
					const attachment = new Discord.Attachment(buffer, 'meme.png');

					message.reply(`${message.author}`, attachment);
					message.delete();
				})
				.catch(error => {
					console.log('error >>>>', error);
				})
		}
	},
	when: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, –∫–æ–≥–¥–∞ –º–∏—Å–∫–∞/gi,
		reply: message => {
			getSchedule(message);
		}
	},
	mig21: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, –≤–∫–ª—é—á–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫, –≤—ã–∫–ª—é—á–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫, –∑–∞–ø—É—Å—Ç–∏|–Ω–∞—á–∞–ª—å–Ω–∏–∫, –æ—Ç–∫—Ä–æ–π|–Ω–∞—á–∞–ª—å–Ω–∏–∫, –∑–∞–∫—Ä–æ–π/i,
		reply: message => {
			const migCallback = updateMig.bind(null, message);

			proceedMemes(message, {mig: true, shouldWait: true}, migCallback);
		}
	},
	mig21takeoff: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, –≤–∑–ª–µ—Ç/i,
		reply: message => {
			const migCallback = updateMig.bind(null, message, true);

			proceedMemes(message, {mig: true, shouldWait: true}, migCallback);
		}
	},
	checkMig21: {
		pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á—Ç–æ –ø–æ –º–∏–≥—É|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ –º–∏–≥—É|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å—Ç–∞—Ç—É—Å –º–∏–≥–∞/i,
		reply: message => {
			showMigStatus(message);
		}
	},
	// test: {
	// 	pattern: /—Ç–µ—Å—Ç/i,
	// 	reply: message => {
	// 		updateProfile({item: 'takeOff'});
	// 	}
	// }
};

function _checkForMemesAndReply(message, {mig} = {}) {
	const isRudeImage = 'https://i.imgur.com/80PqAGP.png';
	const isPoliteImage = 'https://i.imgur.com/NhFpVlK.jpg';

	if (isRude(message.content)) {
		console.log('isRude >>>');

		message.reply(isRudeImage);

		return 'rude';
	}

	if (isPolite(message.content)) {
		console.log('isPolite >>>');

		if (rollByChance(0.25)) {
			message.reply(`\n${isPoliteImage}\n—Ç–∞–ª–æ–Ω –Ω–µ –∑–∞–±–∏—Ä–∞—é`);
			return 'polite';
		}
	}

	if (mig) {
		if (migMemesCount >= MIG_LIMIT) {
			message.reply('—Ç–∞–ª–æ–Ω—ã –Ω–∞ –º–∏–≥ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∂–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö');

			return true;
		}
	}

	if (memesCount >= MEMES_LIMIT) {
		message.reply('—Ç–∞–ª–æ–Ω—ã –Ω–∞ –º–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∂–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö');

		return true;
	}

	return false;
}

function incrementMeme(type, status) {
	if (status === 'polite') {
		return;
	}

	if (type === 'mig') {
		migMemesCount++;
	} else {
		memesCount++;
	}
}

function proceedMemes(message, options, callback) {
	const memeStatus = _checkForMemesAndReply(message, options);
	const {shouldWait, mig} = options;
	const isMig = mig && 'mig';

	if (memeStatus === 'rude') {
		incrementMeme(isMig);
		return true;
	}

	if (memeStatus === false || memeStatus === 'polite') {
		if (callback) {
			if (shouldWait) {
				callback() && incrementMeme(isMig, memeStatus);
			} else {
				incrementMeme(isMig, memeStatus);
				callback();
			}
		}
	}
}

function _checkInfa(message) {
	const channel = message.guild.channels.get(HOME_ID);

	message.reply('–ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ—É...');

	setTimeout(() => {
		channel.send('–ü—Ä–æ–≤–µ—Ä–∏–ª. ' + (Math.floor(Math.random() * 10) > 5
			? '–ò–Ω—Ñ–∞ –ª–æ–∂–Ω–∞—è'
			: '–ò–Ω—Ñ—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'));
	}, 5000);
}

module.exports = MESSAGES;
